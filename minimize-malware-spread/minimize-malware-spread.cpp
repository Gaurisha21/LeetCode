class Solution {
public:
    vector<int> par;
    int findPar(int u)
    {
        return par[u]==u ? u : (par[u] = findPar(par[u]));
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) 
    {
        int n = graph.size();
        vector<int> pop(n, 1);
        for(int i=0; i<n; i++)      
        {
            par.push_back(i);
        }
        
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++)
            {
                if(graph[i][j] == 0 || i == j) continue;
                int p1 = findPar(i), p2 = findPar(j);
                if(p1!=p2)
                {
                    par[p1] = p2;
                    pop[p2] += pop[p1];
                }
            }
        }
        vector<int> infected(n,0);
        for(int ele : initial)
        {
            int p = findPar(ele);
            infected[p]++;
        }
        sort(initial.begin(), initial.end());
        int ans = initial[0], maxpop=0;
        for(int ele : initial)
        {
            int p = findPar(ele);
            if(infected[p]==1 & pop[p]>maxpop)
            {
                maxpop = pop[p];
                ans = ele;
            }
        }
        return ans;
    }
};












